#!/bin/sh
# create the keepNote directory functions

hash_gen(){
  id=""
  for i in 8 4 4 4 12
   do
    hash=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $i | head -n 1)
    if [ $i -eq 12 ]
     then
       id=$id$hash
    else
       id="$id$hash-"
    fi
   done
 echo $id
}
# hashes used for templates
hash1=$(hash_gen)
hash2=$(hash_gen)
hash3=$(hash_gen)
hash4=$(hash_gen)
hash5=$(hash_gen)

create_keepNote(){
# create directory
dir=$1 
mkdir $dir
#create node 
cat <<EOF > $dir/node.xml
<?xml version="1.0" encoding="UTF-8"?>
<node>
<version>6</version>
<dict>
  <key>attr_tables</key><array>
    <dict>
      <key>name</key><string>Default Table</string>
      <key>key</key><string>default</string>
      <key>attrs</key><array>
        <string>title</string>
        <string>created_time</string>
        <string>modified_time</string>
      </array>
    </dict>
  </array>
  <key>expanded</key><true/>
  <key>nodeid</key><string>$hash1</string>
  <key>modified_time</key><integer>$(date +%s)</integer>
  <key>content_type</key><string>application/x-notebook-dir</string>
  <key>created_time</key><integer>$(date +%s)</integer>
  <key>info_sort_dir</key><integer>1</integer>
  <key>title</key><string>$2</string>
  <key>column_widths</key><dict>
    <key>created_time</key><integer>150</integer>
    <key>modified_time</key><integer>1410</integer>
    <key>title</key><integer>150</integer>
  </dict>
  <key>attr_defs</key><array>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Duplicate of</string>
      <key>key</key><string>duplicate_of</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Title</string>
      <key>key</key><string>title</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Filename</string>
      <key>key</key><string>payload_filename</string>
    </dict>
    <dict>
      <key>datatype</key><string>bool</string>
      <key>default</key><true/>
      <key>name</key><string>Expaned</string>
      <key>key</key><string>expanded</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Node ID</string>
      <key>key</key><string>nodeid</string>
    </dict>
    <dict>
      <key>datatype</key><string>timestamp</string>
      <key>default</key><null/>
      <key>name</key><string>Modified time</string>
      <key>key</key><string>modified_time</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Icon open</string>
      <key>key</key><string>icon_open</string>
    </dict>
    <dict>
      <key>datatype</key><string>bool</string>
      <key>default</key><true/>
      <key>name</key><string>Expanded2</string>
      <key>key</key><string>expanded2</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Title Background Color</string>
      <key>key</key><string>title_bgcolor</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string>application/x-notebook-dir</string>
      <key>name</key><string>Content type</string>
      <key>key</key><string>content_type</string>
    </dict>
    <dict>
      <key>datatype</key><string>timestamp</string>
      <key>default</key><null/>
      <key>name</key><string>Created time</string>
      <key>key</key><string>created_time</string>
    </dict>
    <dict>
      <key>datatype</key><string>integer</string>
      <key>default</key><integer>1</integer>
      <key>name</key><string>Folder sort direction</string>
      <key>key</key><string>info_sort_dir</string>
    </dict>
    <dict>
      <key>datatype</key><string>integer</string>
      <key>default</key><integer>9223372036854775807</integer>
      <key>name</key><string>Order</string>
      <key>key</key><string>order</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string>order</string>
      <key>name</key><string>Folder sort</string>
      <key>key</key><string>info_sort</string>
    </dict>
    <dict>
      <key>datatype</key><string>string</string>
      <key>default</key><string></string>
      <key>name</key><string>Icon</string>
      <key>key</key><string>icon</string>
    </dict>
  </array>
  <key>version</key><integer>6</integer>
  <key>order</key><integer>0</integer>
  <key>info_sort</key><string>order</string>
</dict>
</node>
EOF

cat <<EOF > $dir/notebook.nbk
<?xml version="1.0" encoding="UTF-8"?>
<notebook>
<version>6</version>
<pref>
    <dict>
        <key>version</key><integer>6</integer>
        <key>quick_pick_icons</key><array>
            <string>folder.png</string>
            <string>folder-red.png</string>
            <string>folder-orange.png</string>
            <string>folder-yellow.png</string>
            <string>folder-green.png</string>
            <string>folder-blue.png</string>
            <string>folder-violet.png</string>
            <string>folder-grey.png</string>
            <string>note.png</string>
            <string>note-red.png</string>
            <string>note-orange.png</string>
            <string>note-yellow.png</string>
            <string>note-green.png</string>
            <string>note-blue.png</string>
            <string>note-violet.png</string>
            <string>note-grey.png</string>
            <string>star.png</string>
            <string>heart.png</string>
            <string>check.png</string>
            <string>x.png</string>
            <string>important.png</string>
            <string>question.png</string>
            <string>web.png</string>
            <string>note-unknown.png</string>
        </array>
        <key>index_dir</key><string></string>
        <key>colors</key><array>
            <string>#ff9999</string>
            <string>#ffcc99</string>
            <string>#ffff99</string>
            <string>#99ff99</string>
            <string>#99ffff</string>
            <string>#9999ff</string>
            <string>#ff99ff</string>
            <string>#ff0000</string>
            <string>#ffa300</string>
            <string>#ffff00</string>
            <string>#00ff00</string>
            <string>#00ffff</string>
            <string>#0000ff</string>
            <string>#ff00ff</string>
            <string>#7f0000</string>
            <string>#7f5100</string>
            <string>#7f7f00</string>
            <string>#007f00</string>
            <string>#007f7f</string>
            <string>#00007f</string>
            <string>#7f007f</string>
            <string>#ffffff</string>
            <string>#e5e5e5</string>
            <string>#bfbfbf</string>
            <string>#7f7f7f</string>
            <string>#3f3f3f</string>
            <string>#191919</string>
            <string>#000000</string>
        </array>
        <key>windows</key><dict>
            <key>ids</key><dict>
                <key>$hash2</key><dict>
                    <key>viewerid</key><string>$hash3</string>
                    <key>viewer_type</key><string>tabbed_viewer</string>
                </dict>
            </dict>
        </dict>
        <key>viewers</key><dict>
            <key>ids</key><dict>
                <key>$hash4</key><dict>
                    <key>selected_treeview_nodes</key><array>
                        <string>$hash5</string>
                    </array>
                    <key>selected_listview_nodes</key><array>
                        <string>$hash5</string>
                    </array>
                </dict>
                <key>$hash3</key><dict>
                    <key>tabs</key><array>
                        <dict>
                            <key>viewerid</key><string>$hash4</string>
                            <key>viewer_type</key><string>three_pane_viewer</string>
                            <key>name</key><string></string>
                        </dict>
                    </array>
                    <key>current_viewer</key><string>$hash4</string>
                </dict>
            </dict>
        </dict>
        <key>default_font</key><string>Sans 10</string>
    </dict>
</pref>
</notebook>
EOF
}

# create a keepnote node
create_node(){
# check if name already exists
if [ -d "$1" ]; then
  echo "${RED}\n[ERROR]: This $3 '$title' already exists${NC}"
  return 2
fi    
# Random note hash
rhash=$(hash_gen)
mkdir $1
#creade node 
cat <<EOF > $1/node.xml
<?xml version="1.0" encoding="UTF-8"?>
<node>
<version>6</version>
<dict>
  <key>expanded</key><false/>
  <key>title</key><string>$2</string>
  <key>nodeid</key><string>$rhash</string>
  <key>modified_time</key><integer>$(date +%s)</integer>
  <key>version</key><integer>6</integer>
  <key>content_type</key><string>text/xhtml+xml</string>
  <key>created_time</key><integer>$(date +%s)</integer>
  <key>info_sort_dir</key><integer>1</integer>
  <key>order</key><integer>2</integer>
  <key>info_sort</key><string>order</string>
  <key>icon</key><string>$(ls /usr/lib/python2.7/dist-packages/keepnote/images/node_icons/note-* | shuf  -n 1 | cut -d"/" -f 9)</string>
</dict>
</node>
EOF
}

# verify a port 
verify_port(){
  if expr "$1" : '[0-9][0-9]*$' >/dev/null && [ $1 -gt 0 ] && [ $1 -le 65535 ]; then
    return 0
  else
    return 1
  fi 
}

# write into the keepnote page as Html arg1 path_node/page.html; args: patern(s) of  file(s) to write, as per ex '${boxe_path}/sslscan/sslscan_*.txt'  
# Ex: write_to_pager path_node/page.html ${boxe_path}/sslscan/sslscan_*.txt ${boxe_path}/sslscan/sslscan2_*.txt 
# Nota files name should have an only one "_" caracter and weuse multiple with the sameport use  ...sslscan/sslscan2_*.txt* per example 
write_to_page(){
page=$1
content=""
shift
while [ "$1" != "" ]; do
  for port in $( ls $1 2>/dev/null)
   do 
     portnumber=$(basename $port | cut -d'_' -f2 | cut -d'.' -f 1 )
     content="$content <span style='font-size: 16pt'><b><span style='color: #ff0000'><br/>Recon for port '$portnumber' :</span></b></span><span style='font-size: 15pt'>"
     content="$content <span style='color: #000000'><span style='font-family: Sans'><br><br>$(sed  -e 's/</\&lt;/g'  -e 's/>/\&gt;/g'  -e 's/.*/&<br>/'   $port) <br/></span></span></span><br/>"
   done
  rm -rf $1 
  shift 
done  
cat <<EOF > $page
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><body>

$content
</body></html>
EOF
}

# gobuster recon function
run_gobuster(){
  if [ "$(echo "$3" | grep -w "IIS")" != "" ]; then
    extension=".html,.asp,.aspx,.php"
  else
    extension=".html,.php"
  fi
  gobuster  dir -w $2 --wildcard -k -l -e -s 200,204,301,302,307,401,405,501,500,502 -x $extension -t 20 -u $1 -o "$4/recon_${5}.txt" 
  if [ -f  $4/recon_${5}.txt ]; then
    sort $4/recon_${5}.txt | uniq > $4/recon_tmp.txt
    cat $4/recon_tmp.txt > $4/recon_${5}.txt
    rm $4/recon_tmp.txt
  fi  
}

# recon little function 
recon_basic(){
boxe_path=$1
ip=$2
f_oports="$boxe_path/oports.txt"
gobuster_enable=0
sslscan_enable=0
cat $boxe_path/nmap*.txt | grep  open > $f_oports

used_ports="/"

if [ ! -f $f_oports ]; then
    echo "${RED}\n[ERROR]: Recon does not found any nmap file${NC}"
    return 2
fi  
while IFS=: read -r ligne 
   do  
      ## http/Https recon
      if expr "$ligne" : '.*http.*' >/dev/null ; then
       port=$(echo $ligne  | sed 's/  */ /g' | cut -d' ' -f1 | cut -d'/'  -f1)
       verify_port $port
       port_etat=$?
       if [ $port_etat -eq 1 ]; then
        echo "${RED}\n[Warning]: This port '$port' is not correct${NC}"
        continue
       fi
       if [ $port -eq 5985 ]; then
         continue
       fi   
       if [ $gobuster_enable -eq 0 ]; then
         create_node "$boxe_path/gobuster" "Gobuster_Recon" "recon node name "
         gobuster_enable=$((gobuster_enable+1))
       fi
       reg_usep=".*/$port/.*"
       if ! expr  "$used_ports" : $reg_usep >/dev/null ; then
        used_ports="$used_ports${port}/"
        if expr "$ligne" : '.*ssl/http.*' >/dev/null ; then
          if [ $sslscan_enable -eq 0 ]; then
            create_node "$boxe_path/sslscan" "SSL_Recon" "recon node name "
            sslscan_enable=$((sslscan_enable+1))
          fi
          url="https://$ip:$port"
          echo "\n${YELLOW}[RECON SSL/TLS] Discover supported cipher suites for the url: $url \n${NC}"
          sslyze --regular $ip:$port | tee ${boxe_path}/sslscan/sslscan_${port}.txt
        else
          curl -v -k --max-time 10 https://$ip:$port/ 2> /dev/null 1> /dev/null
          if [ $? -eq 0 ]; then
            if [ $sslscan_enable -eq 0 ]; then
              create_node "$boxe_path/sslscan" "ssl_recon" "recon node name "
              sslscan_enable=$((sslscan_enable+1))
            fi
            url="https://$ip:$port"
            echo "\n${YELLOW}[RECON SSL/TLS] Discover supported cipher suites for the url: $url \n${NC}"
            sslyze --regular $ip:$port | tee ${boxe_path}/sslscan/sslscan_${port}.txt
          else
            url="http://$ip:$port"
          fi
        fi
       else
         continue 
       fi  
       echo "\n${YELLOW}[RECON Http/Https] Running gobuster for the url: $url \n${NC}"
       run_gobuster $url $common_wordlist "$ligne" "$boxe_path/gobuster" $port
      fi
      # smb recon
      if expr "$ligne" : '.*445/tcp.*' >/dev/null ; then
        port=$(echo $ligne  | sed 's/  */ /g' | cut -d' ' -f1 | cut -d'/'  -f1)
        verify_port $port
        port_etat=$?
        if [ $port_etat -eq 1 ]; then
          echo "${RED}\n[Warning]: This port '$port' is not correct${NC}"
          continue
        fi
        create_node "$boxe_path/smbrecon" "SMB_Recon" "recon node name "
        create_node "$boxe_path/smbvulns" "SMB_Vulns" "recon node name "
        smbclient -N -L $ip | tee ${boxe_path}/smbrecon/smbrecon_${port}.txt
        smbmap -H $ip | tee ${boxe_path}/smbrecon/smbrecon_${port}.txt2
        nmap -Pn -p445 --script vuln $ip -oN ${boxe_path}/smbvulns/smbvulns_${port}.txt
        write_to_page ${boxe_path}/smbvulns/page.html ${boxe_path}/smbvulns/smbvulns_*.txt
        write_to_page ${boxe_path}/smbrecon/page.html ${boxe_path}/smbrecon/smbrecon_*.txt*
      fi
      # netbios recon
      if expr "$ligne" : '.*139/tcp.*' >/dev/null ; then
        port=$(echo $ligne  | sed 's/  */ /g' | cut -d' ' -f1 | cut -d'/'  -f1)
        verify_port $port
        port_etat=$?
        if [ $port_etat -eq 1 ]; then
          echo "${RED}\n[Warning]: This port '$port' is not correct${NC}"
          continue
        fi
        create_node "$boxe_path/netbiosrecon" "Netbios_Recon" "recon node name "
        enum4linux -a $ip | tee ${boxe_path}/netbiosrecon/netbiosrecon_${port}.txt
        write_to_page ${boxe_path}/netbiosrecon/page.html ${boxe_path}/netbiosrecon/netbiosrecon_*.txt
      fi  
      # snmp recon
      if expr "$ligne" : '.*161/udp.*' >/dev/null ; then
        port=$(echo $ligne  | sed 's/  */ /g' | cut -d' ' -f1 | cut -d'/'  -f1)
        verify_port $port
        port_etat=$?
        if [ $port_etat -eq 1 ]; then
          echo "${RED}\n[Warning]: This port '$port' is not correct${NC}"
          continue
        fi
        create_node "$boxe_path/snmprecon" "SNMP_Recon" "recon node name "
        snmp-check -t $ip -c public  | tee ${boxe_path}/snmprecon/snmprecon_${port}.txt
        nmap -sV -O --script "snmp-*" -sU  -p 161 $ip -oN ${boxe_path}/snmprecon/snmprecon_${port}.txt2
        write_to_page ${boxe_path}/snmprecon/page.html ${boxe_path}/snmprecon/snmprecon_*.txt*
      fi  
   done <"$f_oports" 
rm $f_oports
# sanitize output for recon folders
# gobuster
if [ $gobuster_enable -ne 0 ]; then
  write_to_page ${boxe_path}/gobuster/page.html ${boxe_path}/gobuster/recon_*.txt
fi 
# sslyze
if [ $sslscan_enable -ne 0 ]; then
  write_to_page ${boxe_path}/sslscan/page.html ${boxe_path}/sslscan/sslscan_*.txt
fi 

# recon cms
cms_enable=0
cms=`cat $boxe_path/nmap*.txt | grep http-generator | cut -d ":" -f 2`
if [ "$cms"  != "" ]; then
    create_node "$boxe_path/cms" "CMS_Recon" "recon node name "
    echo "\n${YELLOW}[RECON CMS] Starting CMS Reconnaissance${NC}"
    for line in $cms; do
      port=`cat $boxe_path/nmap*.txt | grep $line -B1 | grep -w "open" | cut -d "/" -f 1`
      case "$line" in
        *Joomla!*) joomscan --url $ip:$port 1> ${boxe_path}/cms/joomlascan_${port}.txt && cms_enable=$((cms_enable+1));;
        *WordPress*) echo -e "\n" | wpscan --url $ip:$port --enumerate p | tee ${boxe_path}/cms/wpscan_${port}.txt && cms_enable=$((cms_enable+1));;
        *Drupal*) droopescan scan drupal -u $ip:$port | tee ${boxe_path}/cms/drupalscan_${port}.txt && cms_enable=$((cms_enable+1));;
        *SharePoint*) gobuster  dir -w $sharepoint_wordlist --wildcard -k -l -e -s 200,204,301,302,307,401,403,405,501,500,502  -t 30 -u http://$1 -o "${boxe_path}/cms/sharepointscan_${port}.txt" && cms_enable=$((cms_enable+1));;
      esac
    done
fi
if [ $cms_enable -ne 0 ]; then
  write_to_page ${boxe_path}/cms/page.html ${boxe_path}/cms/joomlascan_*.txt ${boxe_path}/cms/wpscan_*.txt ${boxe_path}/cms/drupalscan_*.txt ${boxe_path}/cms/sharepointscan_*.txt
else
  rm -rf $boxe_path/cms
fi  

}

# create sub diretory for a host
create_sub_kpn(){
# create directory
if [ $# -eq 8 ]; then
  mydir=$2$1
  title=$1
  lrecon=$8
else
  mydir=$2$8
  title=$8
  lrecon=$9
fi

# ceate keepnote node
create_node $mydir $title "box name "
# masscan 
udp=0
tcp=0
if [ "$4" = "on" ]; then
  if [ "$7" = "-" ];then 
     masscan -p1-65535,U:1-65535 $1 --rate=$6 -e $5  > $mydir/masscan.txt
  else
     masscan -p1-65535,U:1-65535 $1 --rate=$6 -e $5 --router-ip $7 > $mydir/masscan.txt
  fi
  # Initializing variables
  ports_tcp=""
  ports_udp=""
  if [ "$(cat $mydir/masscan.txt)" != "" ]; then
    for port in $(cat $mydir/masscan.txt | grep -i open  | grep -i tcp |cut  -d " " -f 4 | cut -d "/" -f 1) ; do ports_tcp="$port,$ports_tcp"  ; done
    ports_tcp=$(echo $ports_tcp | sed 's/.$//'  )

    for port in $(cat $mydir/masscan.txt | grep -i open  | grep -i udp |cut  -d " " -f 4 | cut -d "/" -f 1) ; do ports_udp="$port,$ports_udp"  ; done
    ports_udp=$(echo $ports_udp | sed 's/.$//'  )
    #echo "ports scan : $ports_tcp"
    if [ $(echo $ports_tcp | wc -w)   -ne 0 ]; then
       nmap  -sV -sS -p $ports_tcp -T4 -sC  -oN $mydir/nmap.txt  $1
       tcp=1
    fi
    if [ $(echo $ports_udp | wc -w)   -ne 0 ]; then
       nmap  -sV -sS -sU -p $ports_udp -T4 -sC  -oN $mydir/nmap2.txt  $1
       udp=1
    fi
  else
    echo "${RED}\n[ERROR]: masscan does not find any open port about '$1'. Maybe the host is down${NC}"
    rm -rf $mydir
    return 2
  fi   
else
  if [ "$3" = "l" ]; then
    nmap  -sV -sS  -T4 -oN $mydir/nmap.txt  $1
  else
    nmap  -sV -sS -p- -T4 -sC  -oN $mydir/nmap.txt  $1
  fi
fi
content=""
if [ "$tcp" -ne 0 ]; then 
content="${content}$(sed   -e 's/</\&lt;/g'  -e 's/>/\&gt;/g'  -e 's/.*/&<br>/'  $mydir/nmap.txt)"
fi
if [ "$udp" -ne 0 ]; then 
content="$content </span></b></span><span style='font-size: 16pt'><b><span style='color: #ff0000'><br/><br/>Udp section :</span></b></span><span style='font-size: 15pt'><span style='color: #000000'><span style='font-family: Sans'><br/><br/>  $(sed  -e 's/</\&lt;/g'  -e 's/>/\&gt;/g'  -e 's/.*/&<br>/'   $mydir/nmap2.txt)"
fi
if [ "$content" != "" ]; then 
cat <<EOF > $mydir/page.html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><body>
<span style='font-size: 15pt'><span style='color: #000000'><span style='font-family: Sans'>
$content
</body></html>
EOF
fi
if [ "$lrecon" = "l" ]; then
  recon_basic $mydir $1 
elif [ "$lrecon" = "h" ]; then
   recon_huge $mydir $1
fi
return 0
}

verify_cidr_param(){
if expr "$1" : '.*:.*' >/dev/null; then
   box="$(echo "$1" | cut -d: -f2)"
   if [ "$box" != "" ]; then
     verify_ip $(echo "$1" | cut -d: -f1)
     if [ $? -eq 0 ]; then
        echo "${RED}\n[ERROR]: parameter \"--cidr=$1\" is not correct. Ip part is wrong. \n${YELLOW}Right format: ip:MachineName${NC}\n"
        exit 2
     else
      box_name="$box"
      cidrip="$(echo "$1" | cut -d: -f1)"
      return 1
     fi
   else
     echo "${RED}\n[ERROR]: parameter \"--cidr=$1\" is not correct. You should define a machine name like: ip:MachineName${NC}\n"
     exit 2
   fi 
elif expr "$1" : '.*/.*' >/dev/null; then
   cidre=$(echo "$1" | cut -d"/" -f2)
   if [ "$cidre" != "" ] && [ $cidre -ge 1 -a $cidre -le 32 ]; then
     verify_ip  $(echo "$1" | cut -d"/" -f1)
     if [ $? -eq 0 ]; then
        echo "${RED}\n[ERROR]: parameter \"--cidr=$1\" is not correct. Ip part is wrong. \n${YELLOW}Right format: ip/cidr${NC}\n"
        exit 2     
     else
      return 2
     fi 
   else
       echo "${RED}\n[ERROR]: parameter \"--cidr=$1\" is not correct. '$cidre' should be an integer: 1<= cidr <=32 \n${YELLOW}Right format: ip/cidr${NC}\n" 
       exit 2
   fi   
fi
verify_ip  $1
if [ $? -eq 0 ]; then
   echo "${RED}\n[ERROR]: parameter \"--cidr=$1\" is not correct. Try a valid ip${NC}\n" 
   exit 2    
fi
return 3
}

verify_ip(){
if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
  for i in 1 2 3 4; do
    if [ $(echo "$1" | cut -d. -f$i) -gt 255 ]; then
     return 0
    fi
  done
  return 1
else
    return 0
fi
}

verify_net_interface(){
if [ "$(ifconfig | grep $1 | cut -d: -f 1)" != "$1" ]; then
   echo "${RED}\n[ERROR]: parameter \"--interface=$1\" is not correct. Interface '$1' not found ${NC}\n" 
   exit 2
fi   
}

# color define
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m'

usage()
{
  if [ "$1" = "addto" ] ; then
     echo "Add a scan into a report already exists mode"
     echo "${GREEN}\nUsage:${NC}"
     echo "\t $0  addto [flags]"
     echo "\n${GREEN}Flags:${NC}"
     echo "\t -h, --help                   help for addto"
     echo "\t     --type=string            l|h  ['h' for huge scan(all ports) and 'l' for light scan(for commun ports)]           (light by default)"
     echo "\t     --recon=string           l|h  ['h' for huge recon(Use big dictionary) and 'l' for light scan(Use common dictionary wordlist)] " 
     echo "\t     --masscan=string         on|no ['on' to enable masscan and 'no' to disable masscan]                             (enable by default)"
     echo "\t     --interface=string       The network interface to use with masscan, required if masscan is enabled"
     echo "\t     --rate=int               The speed of masscan, 150<value<1000                                                   (set to 150 by default)"
     echo "\t     --path=string            Path to a $0 report where the scan will be added                             <required>"
     echo "\t     --cidr=ip[:name]|cidr    ip or a cidr like 10.10.10.0/24, if name used it will be shown instead of the ip"
     echo "\t     --router-ip=ip           The gateway of the network interface if masscan can't found "
     echo "\t                                      it(failed to detect router for interface)"
     echo "\t     --ips-list=string        Path to a file which contains a list of ips to scan, you can define the name to show"
     echo "\t                                      in the report instead of the ip. Using space for the separation"
     echo "\n${GREEN}Examples :${NC}\n"
     echo "Default scan using Masscan with a rate of 500:  \n\t$0 addto --path=/path/to/exists/report/directory --rate=500 --interface=tun0  --cidr=10.10.10.0/16\n"
     echo "Default scan using Masscan with a light reconnaissance:  \n\t$0 addto --path=/path/to/exists/report/directory --interface=tun0  --cidr=10.10.10.0/16 --scan=l\n"
     echo "Default scan using Masscan with a rate of 500, scan one ip and define the name to show instead of ip:  \n\t$0 addto  --path=/path/to/exists/report/directory --rate=500 --interface=tun0  --cidr=10.10.10.12:Box12\n"
     echo "Default scan using Masscan and a list of ips, with the router ip gateway :  \n$0 addto  --path=/path/to/exists/report/directory --ips-list=file --interface=tun0  --router-ip=192.168.55.1 \n"
     echo "Create a report scan with a light scan without Masscan :\n$0 addto --masscan=no  --path=/path/to/exists/report/directory --cidr=10.10.10.14\n"
     echo "Create a report scan with a huge scan without Masscan :\n$0 addto --type=h  --masscan=no  --path=/path/to/exists/report/directory --cidr=10.10.10.0/24\n"
  elif [ "$1" = "new" ] ; then
     echo "Create a new report scan mode"
     echo "${GREEN}\nUsage:${NC}"
     echo "\t $0  new [flags]"
     echo "\n${GREEN}Flags:${NC}"
     echo "\t -h, --help                   help for new"
     echo "\t     --type=string            l|h  ['h' for huge scan(all ports) and 'l' for light scan(for commun ports)]           (light by default)"
     echo "\t     --recon=string           l|h  ['h' for huge recon(Use big dictionary) and 'l' for light scan(Use common dictionary wordlist)] "
     echo "\t     --masscan=string         on|no ['on' to enable masscan and 'no' to disable masscan]                             (enable by default)"
     echo "\t     --interface=string       The network interface to use with masscan, required if masscan is enabled"
     echo "\t     --rate=int               The speed of masscan, 150<value<1000                                                   (set to 150 by default)"
     echo "\t     --path=string            Path to a directory where the $0 will create the new report                  <required>"
     echo "\t     --name=string            The name of the report without space                                                   <Required>"
     echo "\t     --cidr=ip[:name]|cidr    ip or a cidr like 10.10.10.0/24, if name used it will be shown instead of the ip"
     echo "\t     --router-ip=ip           The gateway of the network interface if masscan can't found "
     echo "\t                                      it(failed to detect router for interface)"
     echo "\t     --ips-list=string        Path to a file which contains a list of ips to scan, you can define the name to show"
     echo "\t                                      in the report instead of the ip. Using space for the separation"
     echo  "\n${GREEN}Examples :${NC}\n"
     echo "Default scan using Masscan with a rate of 500:  \n\t$0 new --name=report-name --path=/path/to/report/destination_directory --rate=500 --interface=tun0  --cidr=10.10.10.0/16\n"
     echo "Default scan using Masscan with a light reconnaissance:  \n\t$0 new --name=report-name --path=/path/to/exists/report/directory --interface=tun0  --cidr=10.10.10.0/16 --scan=l\n"
     echo "Default scan using Masscan with a rate of 500, scan one ip and define the name to show instead of ip:  \n\t$0 new --name=report-name --path=/path/to/report/destination_directory --rate=500 --interface=tun0  --cidr=10.10.10.12:Box12\n"
     echo "Default scan using Masscan and a list of ips, with the router ip gateway :  \n$0 new --name=report-name --path=/path/to/report/destination_directory --ips-list=file --interface=tun0  --router-ip=192.168.55.1 \n"
     echo "Create a report scan with a light scan without Masscan :\n$0 new --masscan=no --name=report-name --path=/path/to/report/destination_directory --cidr=10.10.10.14\n"
     echo "Create a report scan with a huge scan without Masscan :\n$0 new --type=h  --masscan=no --name=report-name --path=/path/to/report/destination_directory --cidr=10.10.10.0/24\n"
  else
     echo "${GREEN}\nUsage:${NC}"
     echo "\t $0  [command]"
     echo "${GREEN}Available Commands:${NC}"
     echo "\t ${YELLOW}new${NC}                     Create a new report scan"
     echo "\t ${YELLOW}addto${NC}                   Add a scan into a report already exists"
     echo "\t ${YELLOW}help${NC}                    Help about any command"
     echo "\n${GREEN}Flags:${NC}"
     echo "\t -h, --help                   help for $0"
     echo "\t     --type=string            l|h  ['h' for huge scan(all ports) and 'l' for light scan(for commun ports)]           (light by default)"
     echo "\t     --masscan=string         on|no ['on' to enable masscan and 'no' to disable masscan]                             (enable by default)"
     echo "\t     --interface=string       The network interface to use with masscan, required if masscan is enabled"
     echo "\t     --rate=int               The speed of masscan, 150<value<1000                                                   (set to 150 by default)"
     echo "\nUse '$0 [command] --help' for more information about a command."
  fi
}

# Main 
# verify the command 
if [ "$1" = "addto" ] || [ "$1" = "new" ] ; then
     cmd="$1"
else
     echo "${RED}\n[ERROR]: '$1'command does not exists${NC}"
     usage
     exit
fi 
shift

# Default values
scantype=l
masscan=on
interface=""
required=0
rate=150
file_ips=""
cidrip=""
router_ip="-"
recon="-"
addto=""
newrep=""
gks=$(env | grep KEEPSCAN)
if [ "$gks" = "" ];then
  if [ -d  "/usr/share/KeepScan/template" ]; then
    KEEPSCAN="/usr/share/KeepScan"
    common_wordlist="${KEEPSCAN}/wordlist/common.txt"
    big_wordlist="${KEEPSCAN}/wordlist/big.txt"
    sharepoint_wordlist="${KEEPSCAN}/wordlist/sharepoint.txt"
  else
    if [ -d "./template" ]; then 
      KEEPSCAN="."
      common_wordlist="./wordlist/common.txt"
      big_wordlist="./wordlist/big.txt"
      sharepoint_wordlist="./wordlist/sharepoint.txt"
    else
      print "You should be in the KeepScan directory, or install it globally !!"
      exit 1 
    fi
  fi   
fi

while [ "$1" != "" ]; do    
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        -h | --help | help)
            usage $cmd
            exit
            ;;
        --type)
             if [ "$VALUE" = "h" ] || [ "$VALUE" = "l" ] ; then
                scantype=$VALUE
             else 
                echo "${RED}\n[ERROR]: value \"$VALUE\" for parameter \"$PARAM\" is wrong${NC}\n"
                usage $cmd
                exit 1	
             fi
             ;;
        --recon)
             if [ "$VALUE" = "h" ] || [ "$VALUE" = "l" ] ; then
                recon=$VALUE
             else 
                echo "${RED}\n[ERROR]: value \"$VALUE\" for parameter \"$PARAM\" is wrong${NC}\n"
                usage $cmd
                exit 1  
             fi
             ;;     
        --name)
            name=$VALUE
            required=$((required+1))
            ;;
        --masscan)
             if [ "$VALUE" = "no" ] || [ "$VALUE" = "on" ]; then
                masscan=$VALUE
             else 
                echo "${RED}\n[ERROR]: value \"$VALUE\" for parameter \"$PARAM\" is wrong${NC}\n"
                usage $cmd
                exit 1
             fi
             ;;
        --interface)
            interface=$VALUE
            ;;
        --rate)
            if expr "$VALUE" : '[0-9][0-9]*$' >/dev/null; then
              if [ $VALUE -gt 0 ] && [ $VALUE -le 1000 ] ; then
                 rate=$VALUE
              else
                 echo "${RED}\n[ERROR]: the value  \"$VALUE\" should be a positive integer between 1 and 1000 ${NC}\n"
                 exit 1
              fi
            else
               echo "${RED}\n[ERROR]: the value  \"$VALUE\" should be a positive integer only${NC}\n"
               usage $cmd
               exit 1
            fi
            ;;    
        --path)
            if [ -d "$VALUE" ]; then
              if expr "$VALUE" : '/.*/$' >/dev/null || [ ${#VALUE} = 1 ]; then
                 rootDir=$VALUE
              else
                 rootDir="$VALUE/"
              fi   
              required=$((required+1))
            else
              echo "${RED}\n[ERROR]: the path \"$VALUE\" is not a directory !!${NC}\n"
              usage $cmd
              exit 1
            fi
            ;;
        --ips-list)
            if [ -f "$VALUE" ]; then
              file_ips=$VALUE
              required=$((required+1))	
            else
              echo "${RED}\n[ERROR]: cannot access \"$VALUE\" no such file !!${NC}\n"
              usage $cmd
              exit 1
            fi
            ;;
        --cidr)
            cidrip=$VALUE
            required=$((required+1))
            ;;
        --router-ip)
            verify_ip $VALUE
            if [ $? -ne 0 ]; then
               router_ip="$VALUE"
            else
              echo "${RED}\n[ERROR]: the value  \"$VALUE\" is not a valid ip !!${NC}\n"
              usage $cmd
              exit 1
            fi
            ;;
        *)
            echo "${RED}\n[ERROR]: unknown parameter \"$PARAM\"${NC}\n"
            usage $cmd
            exit 1
            ;;
    esac
    shift
done

# Verify required params
if [ ! -z $cidrip ] && [ ! -z $file_ips ]; then
   echo "${RED}\n[ERROR]: Only use '--cidr' or '--ips-list'${NC}\n"
   usage $cmd
elif [ "$required" -ne 3 ] && [ "$cmd" = "new" ]; then
   echo "${RED}\n[ERROR]: parameters '--name' and '--path' and ('--cidr' or '--ips-list') are required${NC}\n"
   usage $cmd
   exit 1
elif [ "$required" -ne 2 ] && [ "$cmd" = "addto" ]; then
   echo "${RED}\n[ERROR]: parameters '--path' and ('--cidr' or '--ips-list') are required${NC}\n"
   usage $cmd
   exit 1
elif [ "$masscan" = "on" ] && [ "$interface" = "" ]; then
       echo "${RED}\n[ERROR]: the parameter '--interface' must be set when '--masscan' is enabled${NC}\n"
       usage $cmd
       exit 1
elif [ "$cmd" = "addto" ] && [ "$name" != "" ]; then
       echo "${RED}\n[ERROR]: do not use the  parameter '--name' with the 'addto' command${NC}\n"
       usage $cmd
       exit 1     
fi
# verify --cidr and --interface
box_name=""
civer=0
if [ ! -z $cidrip ]; then 
  verify_cidr_param $cidrip
  civer=$?
fi
if [ "$masscan" = "on" ]; then  
  verify_net_interface $interface
fi

#Verify if script run as root
if [ $(id -u)  -ne 0 ]; then 
        echo "${YELLOW}This script must be run as root, use sudo "$0" instead\n" 1>&2
        exit 1
fi

if [ "$cmd" = "new" ]; then 
   dir="$rootDir$name/"
   scanfile="${dir}scan.txt"
   ipfile="${dir}boxes_ips.txt"
   # verify if the report already exists 
   if [ -d $dir ]; then 
     echo "${RED}\n[ERROR]: This report '$dir' already exists${NC}"
    exit 2
   fi 
elif [ -f "${rootDir}node.xml" ]; then  
    dir="$rootDir"
    scanfile="${dir}scan.txt"
    ipfile="${dir}boxes_ips.txt"
else
    echo "${RED}\n[ERROR]: Parameter '--path', the directory '$rootDir' is not a valid keepnote report${NC}\n"
    exit 1
fi   
num_ips=0

if [ "$cmd" = "new" ]; then
   echo "${YELLOW}Creation of a new report '$name' into '$rootDir'${NC}\n"
   create_keepNote $dir $name && \
   cp -r $KEEPSCAN/template/__NOTEBOOK__ $dir 
fi
if [ "$file_ips" != "" ]; then
   cat $file_ips > $ipfile
fi
if [ $civer -eq 1 ]; then
   echo "${YELLOW}[SCAN From --cidr]: Scan of machine '$box_name' with the ip address $cidrip\n${NC}"
   create_sub_kpn  $cidrip $dir $scantype $masscan $interface $rate $router_ip $box_name $recon
   if [ $? -ne 2 ]; then
      num_ips=$((num_ips+1))
   fi
elif [ $civer -eq 3 ]; then
   echo "${YELLOW}[SCAN From --cidr]: scan of $cidrip machine address\n${NC}"
   create_sub_kpn $cidrip $dir $scantype $masscan $interface $rate $router_ip $recon
   if [ $? -ne 2 ]; then
      num_ips=$((num_ips+1))
   fi   
elif [ $civer -eq 2 ]; then
   nmap --top-ports 100 -oN $scanfile $cidrip 
   cat $scanfile |  grep -i "Nmap scan" | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])' > $ipfile 
fi
iplist="/"
machinelist="/"
if [ -f $ipfile  ]; then
   while IFS=: read -r ligne 
   do
      if [ "$ligne" != "" ]; then   
       # spaces strip
       ligne="$(echo $ligne | sed 's/  */:/g')"
       if expr $ligne : '.*:.*' >/dev/null; then
          ip=$(echo $ligne | cut -d ':' -f1)
          name=$(echo $ligne | cut -d ':' -f2)
          verify_ip $ip
          if [ $? -ne 0 ]; then
            echo "${YELLOW}[SCAN from IPS List]: Scan of machine '$name' with the ip address $ip\n${NC}"
            nameregex=".*/$name/.*"
            if   expr $machinelist : $nameregex >/dev/null; then
               echo "${RED}\n[ERROR]: This machine name '$name' was already used${NC}"
            else
              create_sub_kpn $ip $dir $scantype $masscan $interface $rate $router_ip $name $recon
              if [ $? -ne 2 ]; then
                 num_ips=$((num_ips+1))
              fi 
               machinelist="$machinelist$name/"   
            fi   
          else
            echo "${RED}\n[ERROR]: \"$ip\" is not a valid ip${NC}"
          fi 
       else
          ip=$(echo $ligne | cut -d ':' -f1)
          verify_ip $ip
          if [ $? -ne 0 ]; then
            echo "${YELLOW}[SCAN from IPS List]: Scan of $ip machine address\n${NC}"
            ipregex=".*/$ip/.*"
            if ! expr $iplist : $ipregex >/dev/null; then
               create_sub_kpn $ip $dir $scantype $masscan $interface $rate $router_ip $recon
               if [ $? -ne 2 ]; then
                  num_ips=$((num_ips+1))
               fi
               iplist="$iplist$ip/"
            else
               echo "${RED}\n[ERROR]: This machine ip '$ip' was already used${NC}"
            fi   
          else
            echo "${RED}\n[ERROR]: \"$ip\" is not a valid ip${NC}"
          fi  
       fi
      fi 
   done <"$ipfile"
# clean report 
rm  $ipfile  
fi        
## cleean report 
if [ -f $scanfile ]; then
   rm $scanfile
fi
if [ $num_ips -gt 0 ]; then   
   echo "${GREEN}\n$0 successfully scaned $num_ips ip(s)${NC}"
   # if script runs with sudo, run the keepnote as the sudo user
   if [ "$SUDO_USER" != "" ]; then
     if [ "$cmd" = "addto" ] && [ -f "${dir}trash/node.xml" ]; then
        boxnumbs=$(ls ${dir}*/node.xml | wc -w)
        sed -i -e 's/.*order.*integer.*/  <key>order<\/key><integer>'$((boxnumbs-1))'<\/integer>/' ${dir}trash/node.xml
     fi    
     chown -R ${SUDO_USER}:${SUDO_USER} $dir 
     su -c "keepnote --no-show-errors --newproc --no-default  $dir &" $SUDO_USER && \
     exit 0
   else
      if [ "$cmd" = "addto" ] && [ -f "${dir}trash/node.xml" ]; then
        boxnumbs=$(ls ${dir}*/node.xml | wc -w)
        sed -i -e 's/.*order.*integer.*/  <key>order<\/key><integer>'$((boxnumbs-1))'<\/integer>/' ${dir}trash/node.xml
      fi 
      keepnote --no-show-errors --newproc --no-default $dir &
      exit 0
   fi
else
   echo "\n${RED}$0 does not find any valid ip to scan${NC}"
   if [ "$cmd" = "new" ]; then
     rm -rf $dir
   fi  
fi